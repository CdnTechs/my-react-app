{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","id","type","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","name","cols","rows","value","onChange","event","target","placeholder","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alerts","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6894f4c7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link, Outlet ,BrowserRouter} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <li className=\"navbar-brand\" href=\"\">\r\n          {props.title}\r\n        </li>\r\n        {/* <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button> */}\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li> */}\r\n            <li className=\"my-2 mx-2\">\r\n              <div className=\"form-check form-switch\">\r\n                <input\r\n                  className=\"form-check-input\"\r\n                  type=\"checkbox\"\r\n                  id=\"flexSwitchCheckDefault\"\r\n                  onClick={props.toggleMode}\r\n                />\r\n                <label\r\n                  className={`form-check-label text-${\r\n                    props.mode === \"light\" ? \"dark\" : \"light\"\r\n                  }`}\r\n                  htmlFor=\"flexSwitchCheckDefault\"\r\n                >\r\n                  Enable dark mode\r\n                </label>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase!\",\"success\");\r\n  };\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase!\",\"success\");\r\n  };\r\n  const clearText = () => {\r\n    setText('');\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n  }\r\n  const handleExtraSpaces = () => {\r\n      let newText = text.split(/[ ]+/);\r\n      setText(newText.join(\" \"));\r\n  }\r\n  \r\n  return (\r\n      <>\r\n    <div className=\"container\" style={{color:props.mode ==='dark' ? 'white':'black'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea\r\n          name=\"\"\r\n          id=\"myBox\"\r\n          className=\"form-control\"\r\n          cols=\"30\"\r\n          rows=\"8\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          placeholder=\"Enter text here!\"\r\n          style={{backgroundColor:props.mode ==='dark' ? 'gray':'white'}}\r\n        ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n        Convert to uppercase\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>\r\n        Convert to lowercase\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={clearText}>\r\n        Clear Text\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>\r\n        Copy Text\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>\r\n        Remove Extra Spaces\r\n      </button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color:props.mode ==='dark' ? 'white':'black'}}>\r\n        <h1>Your text summary</h1>\r\n        <p>{text.split(\" \").length-1} words and {text.length} characters.</p>\r\n        <p>And takes {0.008 *(text.split(\" \").length-1)} minutes to read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alerts(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n        \r\n        props.alert && <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n          <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        \r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n      </div>\r\n  );\r\n}\r\n","import { useState } from \"react/cjs/react.development\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alerts from \"./components/Alerts\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alerts alert={alert} />\n      {/* <div className=\"container my-3\">\n        <About />\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Enter the text below to analyze \"\n          mode={mode}\n        />\n      </div> */}\n\n      {/* <BrowserRouter>\n        <Routes>\n      <Route path=\"/\" element={}*/}\n            <TextForm \n          showAlert={showAlert}\n          heading=\"Enter the text below to analyze \"\n          mode={mode}/>\n          {/* <Route path=\"about\" element={<About />} />\n        </Routes>\n      </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}